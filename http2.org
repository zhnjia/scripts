#+OPTIONS: \n:t
* 背景
HTTP是一个非常成功的协议。然而，HTTP的底层传输方式的几个特性带来的负面效果，影响了应用程序的性能。
尤其是HTTP1.0，在一个TCP链接上同一时间只允许处理一个请求。HTTP1.1添加了管道，仅部分解决了并发的问题，任然有报头阻塞的问题。因此，HTTP1.0/HTTP1.1客户端需要使用多个链接来解决并发和延迟的问题。
此外，HTTP头部字段经常是重复和冗余的，不仅增加了不必要的网络传输，还导致TCP初始化拥塞窗口被快速填满。当有多个请求创建新TCP链接时，使得延时变得过大。
HTTP2.0在一个链接上定义了一个优化的HTTP语义映射。允许在同一个链接上交叉传输请求和响应，对头部进行高效的编码。请求添加了优先级属性，使得高优先级的请求能够更快的完成，进一步提高性能。
与HTTP1.x相比，2.0使用更少的网络链接。意味着更少的网络竞争并使用长链接，使得网络能发挥更好的作用。
最后，2.0使用二进制消息帧，使得消息处理更高效。
* 协议概览
HTTP2优化了HTTP语义上的传输，并且支持1.1的所有核心功能，目标是通过几种方式提高效率。
2.0最基本的协议单元是帧。不同的帧完成不同的任务。比如，HEADERS和DATA就是请求和响应；其他帧，SETTINGS、WINDOW_UPDATE和PUSH_PROMISE是2.0的特性。
每一组请求和响应在独立分配的流传输,实现多路并发。流之间是完全独立的，因此一个阻塞或慢速的流是不会影响其他流的处理的。
流量控制和优先级可以更好的使用多路并发。流量控制能确保只有接收方能处理的数据才可以传输。优先级使得有限地资源能够被更重要的流使用。
2.0支持服务端可以主动下发PUSH响应。PUSH使得服务端可以预测客户端使用的数据而主动发送，权衡网络会出现潜在的延迟。服务端综合一个PUSH_PROMISE帧，然后另起一个流发送响应。
首部可能包含大量的冗余数据，帧可以压缩。通常情况下，允许多个请求压缩到一个数据包里，可以极大地减少请求的大小。
** 文章组织
详细说明分成4个部分：
1. 启动HTTP2.0包含了如何初始化链接
2. 帧和流层说明了数据机构以及如何形成多路复用
3. 帧和错误定义了帧细节和错误类型
4. HTTP映射和额外的需求描述了HTTP语义是如何用帧和流表达的
有些帧和流是完全独立与HTTP的，这个详述没有定义完全通用的帧层。这些帧和流是因协议和PUSH而定制的。
** 约定和术语
client: 初始化HTTP2.0链接的终端。clients 发送请求并接受响应。
connection: 两个终端之间的传输层链接。
connection error: 影响整个HTTP2.0链接的错误
endpoint: 链接的客户端或服务端
frame: HTTP2.0的最小交互单元，根据不同类型有头部和不同长度字节数组成。
peer: 对端。
receiver: 接受帧数据的一方
sender: 发送帧数据的一方
server: 接受HTTP2.0链接的终端。Servers接受请求并发送回响。
stream: 在HTTP2.0链接中双向传输的帧流。
stream error: 独立的一个流上的错误。
* 启动HTTP2
HTTP2.0是一个运行在TCP上的应用层协议。client是链接发起端。
HTTP2.0同样使用http和https，端口也是和HTTP1.1一致。因此请求一个http或https的资源首先要看服务端是否支持HTTP2.0。
决定是否支持HTTP2.0在http和https是不同的。
** HTTP2版本指定
h2 指明协议使用TLS
h2c 使用明文TCP
** "http"
客户端在不知道下一跳是否支持2.0时使用HTTP Upgrade机制。发送1.1请求时添加一个包含“h2c”的头部，同时必须包含HTTP-Settings首部。
例如：
#+BEGIN_SRC css
GET / HTTP/1.1
Host: server.example.com
Connection: Upgrade, HTTP2-Settings
Upgrade: h2c
HTTP2-Settings: <base64url encoding of HTTP/2 SETTINGS payload>
#+END_SRC


